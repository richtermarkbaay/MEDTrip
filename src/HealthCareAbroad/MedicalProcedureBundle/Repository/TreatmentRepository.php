<?php

namespace HealthCareAbroad\MedicalProcedureBundle\Repository;


use Doctrine\ORM\Query\Expr\Join;

use HealthCareAbroad\InstitutionBundle\Entity\InstitutionMedicalCenter;

use HealthCareAbroad\MedicalProcedureBundle\Entity\Treatment;

use Doctrine\ORM\EntityRepository;

/**
 * TreatmentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TreatmentRepository extends EntityRepository
{
	public function search($term = '', $limit = 10)
	{
		$dql = "
			SELECT c
			FROM MedicalProcedureBundle:Treatment AS c
			WHERE c.name LIKE :term
			ORDER BY c.name ASC"
		;
	
		$query = $this->_em->createQuery($dql);
		$query->setParameter('term', "%$term%");
		$query->setMaxResults($limit);
	
		return $query->getResult();
	}
	
	/**
	 * Get QueryBuilder for getting active treatments that can be used for dropdown field types
	 * 
	 * @return Doctrine\ORM\QueryBuilder
	 */
	public function getQueryBuilderForGettingAvailableTreatments()
	{
	    return $this->getEntityManager()->createQueryBuilder()
            ->add('select', 't')
            ->add('from', 'MedicalProcedureBundle:Treatment t')
            ->add('where', 't.status = :active')
	        ->setParameter('active', Treatment::STATUS_ACTIVE);
	}

	/**
	 * @author Adelbert Silla
	 * @param InstitutionMedicalCenter $institutionMedicalCenter
	 * @return array of treatment_procedure type_id
	 */
	public function getActiveProcedureTypeIdsOfInstitution(InstitutionMedicalCenter $institutionMedicalCenter)
	{
		$qb = $this->_em->createQueryBuilder()
			->select('a.id, b.id as treatment_id')
			->from('InstitutionBundle:InstitutionTreatment', 'a')
			->innerJoin('a.treatment', 'b')
			->add('where','a.institutionMedicalCenter = :institutionMedicalCenter')
			->setParameter('institutionMedicalCenter', $institutionMedicalCenter);
	
		$result = $qb->getQuery()->getResult();
		$ids = array();

		foreach($result as $each) {
			$ids[$each['id']] = $each['treatment_id'];
		}

		return $ids;
	}

	/**
	 * @author Adelbert Silla
	 * 
	 * Get the query builder available MedicalProcedure type of a MedicalCenter that has not been used in the Institution
	 *
	 * @param InstitutionMedicalCenter $institutionMedicalCenter
	 */
	public function getQueryBuilderForAvailableInstitutionTreatments(InstitutionMedicalCenter $institutionMedicalCenter)
	{
	    /**
	    SELECT a . * , b . *
        FROM `treatments` a
        LEFT JOIN `institution_treatments` b ON a.id = b.treatment_id
        WHERE a.medical_center_id =7
        AND b.id IS NULL 
	     **/
	    
	    $qb = $this->getEntityManager()->createQueryBuilder();
	    $qb->select('a')
    	    ->from('MedicalProcedureBundle:Treatment', 'a')
    	    ->leftJoin('a.institutionTreatments', 'b')
    	    ->where('a.status = :active')
    	    ->andWhere('a.medicalCenter = :medicalCenterId')
    	    ->andWhere('b.id IS NULL')
    	    ->setParameter('active', Treatment::STATUS_ACTIVE)
    	    ->setParameter('medicalCenterId', $institutionMedicalCenter->getMedicalCenter()->getId());
	    return $qb;
	    
	    
		/**$activeProcedureTypeIds = $this->getActiveProcedureTypeIdsOfInstitution($institutionMedicalCenter);

		return $this->getEntityManager()->createQueryBuilder()
			->add('select', 'a')
			->add('from', 'MedicalProcedureBundle:Treatment a')
			->add('where', 'a.medicalCenter = :medicalCenter')
			->andWhere('a.id NOT IN (:activeProcedureTypeIds)')
			->andWhere('a.status = :active')
			->setParameter('medicalCenter', $institutionMedicalCenter->getMedicalCenter())
			->setParameter('activeProcedureTypeIds', implode(',', $activeProcedureTypeIds))
			->setParameter('active', Treatment::STATUS_ACTIVE);**/
	}
}