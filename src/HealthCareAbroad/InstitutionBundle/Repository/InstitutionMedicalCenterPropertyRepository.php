<?php

namespace HealthCareAbroad\InstitutionBundle\Repository;

use HealthCareAbroad\HelperBundle\Entity\AwardingBody;

use Doctrine\ORM\Query;
use HealthCareAbroad\HelperBundle\Classes\QueryOptionBag;
use Doctrine\ORM\Mapping\ClassMetadata;

use HealthCareAbroad\InstitutionBundle\Entity\InstitutionPropertyType;

use HealthCareAbroad\HelperBundle\Entity\GlobalAward;

use Doctrine\ORM\Query\ResultSetMapping;

use HealthCareAbroad\InstitutionBundle\Entity\InstitutionMedicalCenter;

use HealthCareAbroad\InstitutionBundle\Entity\InstitutionProperty;

use Doctrine\ORM\EntityRepository;

/**
 * InstitutionPropertyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InstitutionMedicalCenterPropertyRepository extends EntityRepository
{
    /**
     * Get all ancillary services by institution medical center
     * 
     * @param InstitutionMedicalCenter $institutionMedicalCenter
     * @return array OfferedService
     */
    public function getAllServicesByInstitutionMedicalCenter(InstitutionMedicalCenter $institutionMedicalCenter)
    {
        $rsm = new ResultSetMapping();
        $rsm->addEntityResult('AdminBundle:OfferedService', 'b');
        $rsm->addFieldResult('b', 'id', 'id');
        $rsm->addFieldResult('b', 'name', 'name');
        $rsm->addFieldResult('b', 'status', 'status');
        $rsm->addFieldResult('b', 'date_created', 'dateCreated');
        
        $propertyType = $this->getEntityManager()->getRepository('InstitutionBundle:InstitutionPropertyType')->findOneBy(array('name' => InstitutionPropertyType::TYPE_ANCILLIARY_SERVICE));
        
        $sql = "SELECT b.* FROM institution_medical_center_properties a JOIN offered_services b ON b.id = a.value 
        WHERE a.institution_id = :id and a.institution_medical_center_id = :imcId
        AND a.institution_property_type_id = :propertyType
        ORDER BY b.name ASC";
        $query = $this->getEntityManager()->createNativeQuery($sql, $rsm)
            ->setParameter('id', $institutionMedicalCenter->getInstitution()->getId())
            ->setParameter('imcId', $institutionMedicalCenter->getId())
            ->setParameter('propertyType', $propertyType->getId());
        
        return $query->getResult();
    }
    
    /**
     * Get global awards of an institution medical center
     * 
     * @param InstitutionMedicalCenter $institutionMedicalCenter
     * @return array GlobalAward
     */
    public function getAllGlobalAwardsByInstitutionMedicalCenter(InstitutionMedicalCenter $institutionMedicalCenter)
    {
        $globalAwardPropertyType = $this->getEntityManager()->getRepository('InstitutionBundle:InstitutionPropertyType')->findOneBy(array('name' => InstitutionPropertyType::TYPE_GLOBAL_AWARD));

        $sql = "SELECT a.value  FROM institution_medical_center_properties a ".
            "WHERE a.institution_property_type_id = :propertyType AND a.institution_medical_center_id = :imcId";
        $statement = $this->getEntityManager()
            ->getConnection()->prepare($sql);
 
        $statement->execute(array('propertyType' => $globalAwardPropertyType->getId(), 'imcId' => $institutionMedicalCenter->getId()));
        
        $result = array();
        if($statement->rowCount() > 0) {
            $ids = array();
            while ($row = $statement->fetch(Query::HYDRATE_ARRAY)) {
                $ids[] = $row['value'];
            }
            
            $dql = "SELECT a, b FROM HelperBundle:GlobalAward a INNER JOIN a.awardingBody as b WHERE a.id IN (?1)";
            $query = $this->getEntityManager()->createQuery($dql)
            ->setParameter(1, $ids);
             
            $result = $query->getResult();
        }
   
        return $result;
    }
    
    public function getAvailableGlobalAwardsOfInstitutionMedicalCenter(InstitutionMedicalCenter $institutionMedicalCenter, QueryOptionBag $options)
    {
        $globalAwardPropertyType = $this->getEntityManager()->getRepository('InstitutionBundle:InstitutionPropertyType')->findOneBy(array('name' => InstitutionPropertyType::TYPE_GLOBAL_AWARD));
        $sql = "SELECT a.value  FROM institution_medical_center_properties a WHERE a.institution_property_type_id = :propertyType AND a.institution_medical_center_id = :institutionMedicalCenterId";
    
        $statement = $this->getEntityManager()
        ->getConnection()->prepare($sql);
    
        $statement->execute(array('propertyType' => $globalAwardPropertyType->getId(), 'institutionMedicalCenterId' => $institutionMedicalCenter->getId()));
    
        $result = array();
        $ids = array();
        if($statement->rowCount() > 0) {
            while ($row = $statement->fetch(Query::HYDRATE_ARRAY)) {
                $ids[] = $row['value'];
            }
        }
    
        $qb = $this->getEntityManager()->createQueryBuilder()
        ->select('a,b')
        ->from('HelperBundle:GlobalAward', 'a')
        ->innerJoin('a.awardingBody', 'b')
        ->where('1=1');
    
        if ($options->has('globalAward.name')) {
            $qb->andWhere('a.name LIKE :globalAwardName')
            ->setParameter('globalAwardName', '%'.$options->get('globalAward.name').'%');
        }
    
        if ($options->has('globalAward.type')) {
            $qb->andWhere('a.type = :globalAwardType')
            ->setParameter('globalAwardType', $options->get('globalAward.type'));
        }
    
        if (\count($ids)) {
            $qb->andWhere($qb->expr()->notIn('a.id', ':globalAwardIds'))
            ->setParameter('globalAwardIds', $ids);
        }
        //echo $qb->getQuery()->getSQL(); exit;
        return $qb->getQuery()->getResult();
    }
}